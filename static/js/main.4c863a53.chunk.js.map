{"version":3,"sources":["assets/noPosterSmall.png","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","API.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Routes/Collections/CollectPresenter.js","Routes/Collections/index.js","Routes/Collections/CollectContainer.js","Routes/Series/SeriesPresenter.js","Routes/Series/index.js","Routes/Series/SeriesContainer.js","Components/Header.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["module","exports","Container","styled","div","Title","span","Grid","Section","title","children","role","aria-label","Text","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","to","require","arai-label","length","substring","HomePresenter","nowPlaying","upcoming","popular","loading","error","Helmet","Loader","map","movie","key","poster_path","original_title","vote_average","release_date","api","axios","create","baseURL","params","api_key","language","series","seasonId","get","append_to_response","collectons","moviesApi","term","query","encodeURIComponent","tvApi","HomeContainer","state","data","results","this","setState","React","Component","TVPresenter","topRated","airingToday","show","original_name","first_air_date","TVContainer","console","log","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","event","preventDefault","searchByTerm","target","a","Backdrop","bgImage","Content","Cover","SubCover","Data","h3","ItemContainer","Item","Divider","Overview","p","Site","SeriesLink","Url","li","Img","img","CollectImg","Company","GridWrapper","SubGridWrapper","Wrapper","Production","SubTitle","h4","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","index","name","imdb_id","href","overview","production_companies","company","logo_path","src","production_countries","country","videos","belongs_to_collection","seasons","season","season_number","DetailContainer","pathname","location","includes","match","push","history","parsedId","parseInt","isNaN","CollectPresenter","parts","part","CollectContainer","SeriesPresenter","episodes","episode","still_path","SeriesContainer","sId","parsedsId","Header","header","List","ul","current","SLink","Link","withRouter","path","exact","component","Home","TV","Search","Detail","Collections","Series","from","GlobalStyles","createGlobalStyle","reset","App","Router","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c863a53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noPosterSmall.87a0eb6a.png\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  :not(:last-child) {\r\n    margin-bottom: 50px;\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  margin-top: 25px;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, 125px);\r\n  grid-gap: 20px;\r\n`;\r\n\r\nconst Section = ({ title, children }) => (\r\n  <Container>\r\n    <Title>{title}</Title>\r\n    <Grid>{children}</Grid>\r\n  </Container>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node,\r\n  ]),\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 28px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport default () => (\r\n  <Container>\r\n    <span role=\"img\" aria-label=\"Loading\">\r\n      ⏰\r\n    </span>\r\n  </Container>\r\n);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Text = styled.span`\r\n  color: ${(props) => props.color};\r\n`;\r\n\r\nconst Message = ({ text, color }) => (\r\n  <Container>\r\n    <Text color={color}>{text}</Text>\r\n  </Container>\r\n);\r\n\r\nMessage.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  color: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  font-size: 12px;\r\n`;\r\n\r\nconst Image = styled.div`\r\n  background-image: url(${(props) => props.bgUrl});\r\n  height: 180px;\r\n  background-size: cover;\r\n  border-radius: 4px;\r\n  background-position: center center;\r\n  transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst Rating = styled.span`\r\n  position: absolute;\r\n  bottom: 5px;\r\n  right: 5px;\r\n  opacity: 0;\r\n  transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n  margin-bottom: 5px;\r\n  position: relative;\r\n  &:hover {\r\n    ${Image} {\r\n      opacity: 0.3;\r\n    }\r\n    ${Rating} {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  display: block;\r\n  margin-bottom: 3px;\r\n`;\r\n\r\nconst Year = styled.span`\r\n  font-size: 10px;\r\n  color: rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\r\n  <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\r\n    <Container>\r\n      <ImageContainer>\r\n        <Image\r\n          bgUrl={\r\n            imageUrl\r\n              ? `https://image.tmdb.org/t/p/w300${imageUrl}`\r\n              : require(\"../assets/noPosterSmall.png\")\r\n          }\r\n        />\r\n        <Rating>\r\n          <span role=\"img\" arai-label=\"review rating\">\r\n            ⭐\r\n          </span>{\" \"}\r\n          {rating}/10\r\n        </Rating>\r\n      </ImageContainer>\r\n      <Title>\r\n        {title.length > 18 ? `${title.substring(0, 15)}...` : title}\r\n      </Title>\r\n      <Year>{year}</Year>\r\n    </Container>\r\n  </Link>\r\n);\r\n\r\nPoster.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  imageUrl: PropTypes.string,\r\n  title: PropTypes.string.isRequired,\r\n  rating: PropTypes.number,\r\n  year: PropTypes.string,\r\n  isMovie: PropTypes.bool,\r\n};\r\n\r\nexport default Poster;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst HomePresenter = ({ nowPlaying, upcoming, popular, loading, error }) => (\r\n  <>\r\n    <Helmet>\r\n      <title>Movies | Nomflix</title>\r\n    </Helmet>\r\n\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <Container>\r\n        <Helmet>\r\n          <title>Movies | Nomflix</title>\r\n        </Helmet>\r\n        {nowPlaying && nowPlaying.length > 0 && (\r\n          <Section title=\"Now Playing\">\r\n            {nowPlaying.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                imageUrl={movie.poster_path}\r\n                title={movie.original_title}\r\n                rating={movie.vote_average}\r\n                isMovie={true}\r\n                year={movie.release_date.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {upcoming && upcoming.length > 0 && (\r\n          <Section title=\"Upcoming Movies\">\r\n            {upcoming.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                imageUrl={movie.poster_path}\r\n                title={movie.original_title}\r\n                rating={movie.vote_average}\r\n                isMovie={true}\r\n                year={movie.release_date.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {popular && popular.length > 0 && (\r\n          <Section title=\"Popular Movies\">\r\n            {popular.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                imageUrl={movie.poster_path}\r\n                title={movie.original_title}\r\n                rating={movie.vote_average}\r\n                isMovie={true}\r\n                year={movie.release_date.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n      </Container>\r\n    )}\r\n  </>\r\n);\r\n\r\nHomePresenter.propTypes = {\r\n  nowPlaying: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  upcoming: PropTypes.array,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n};\r\n\r\nexport default HomePresenter;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3/\",\r\n  params: {\r\n    api_key: \"0660681ed36a895a19653f0a4317e292\",\r\n    language: \"en-US\",\r\n  },\r\n});\r\n\r\nexport const series = {\r\n  seriesDetail: (id, seasonId) =>\r\n    api.get(`tv/${id}/season/${seasonId}`, {\r\n      params: {\r\n        append_to_response: \"episodes\",\r\n      },\r\n    }),\r\n};\r\n\r\nexport const collectons = {\r\n  collectDetail: (id) =>\r\n    api.get(`collection/${id}`, {\r\n      params: {\r\n        append_to_response: \"parts\",\r\n      },\r\n    }),\r\n};\r\n\r\nexport const moviesApi = {\r\n  nowPlaying: () => api.get(\"movie/now_playing\"),\r\n  upcoming: () => api.get(\"movie/upcoming\"),\r\n  popular: () => api.get(\"movie/popular\"),\r\n  movieDetail: (id) =>\r\n    api.get(`movie/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\",\r\n      },\r\n    }),\r\n  search: (term) =>\r\n    api.get(\"search/movie\", {\r\n      params: {\r\n        query: encodeURIComponent(term),\r\n      },\r\n    }),\r\n};\r\n\r\nexport const tvApi = {\r\n  topRated: () => api.get(\"tv/top_rated\"),\r\n  popular: () => api.get(\"tv/popular\"),\r\n  airingToday: () => api.get(\"tv/airing_today\"),\r\n  showDetail: (id) =>\r\n    api.get(`tv/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\",\r\n      },\r\n    }),\r\n  search: (term) =>\r\n    api.get(\"search/tv\", {\r\n      params: {\r\n        query: encodeURIComponent(term),\r\n      },\r\n    }),\r\n};\r\n\r\nexport default api;\r\n","import HomeContainer from \"./HomeContainer\";\r\n\r\nexport default HomeContainer;\r\n","import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"API\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    nowPlaying: null,\r\n    upcoming: null,\r\n    popular: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: nowPlaying },\r\n      } = await moviesApi.nowPlaying();\r\n      const {\r\n        data: { results: upcoming },\r\n      } = await moviesApi.upcoming();\r\n\r\n      const {\r\n        data: { results: popular },\r\n      } = await moviesApi.popular();\r\n\r\n      this.setState({\r\n        nowPlaying,\r\n        upcoming,\r\n        popular,\r\n      });\r\n    } catch {\r\n      this.setState({\r\n        error: \"Can't find movie information.\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n\r\n    return (\r\n      <HomePresenter\r\n        nowPlaying={nowPlaying}\r\n        upcoming={upcoming}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"../../Components/Section\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TVPresenter = ({ topRated, popular, airingToday, loading, error }) => (\r\n  <>\r\n    <Helmet>\r\n      <title>TV Shows | Nomflix</title>\r\n    </Helmet>\r\n\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <Container>\r\n        {topRated && topRated.length > 0 && (\r\n          <Section title=\"Top Rated Shows\">\r\n            {topRated.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                imageUrl={show.poster_path}\r\n                title={show.original_name}\r\n                rating={show.vote_average}\r\n                year={show.first_air_date.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {popular && popular.length > 0 && (\r\n          <Section title=\"Popular Shows\">\r\n            {popular.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                imageUrl={show.poster_path}\r\n                title={show.original_name}\r\n                rating={show.vote_average}\r\n                year={show.first_air_date.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {airingToday && airingToday.length > 0 && (\r\n          <Section title=\"Airing Today\">\r\n            {airingToday.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                imageUrl={show.poster_path}\r\n                title={show.original_name}\r\n                rating={show.vote_average}\r\n                year={show.first_air_date.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n      </Container>\r\n    )}\r\n  </>\r\n);\r\nTVPresenter.propTypes = {\r\n  topRated: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  airingToday: PropTypes.array,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n};\r\n\r\nexport default TVPresenter;\r\n","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;\r\n","import React from \"react\";\r\nimport TVPresenter from \"./TVPresenter\";\r\nimport { tvApi } from \"API\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    topRated: null,\r\n    popular: null,\r\n    airingToday: null,\r\n    loading: true,\r\n    error: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: topRated },\r\n      } = await tvApi.topRated();\r\n      const {\r\n        data: { results: popular },\r\n      } = await tvApi.popular();\r\n      const {\r\n        data: { results: airingToday },\r\n      } = await tvApi.airingToday();\r\n      this.setState({ topRated, popular, airingToday });\r\n    } catch {\r\n      this.setState({\r\n        error: \"Can't find TV information.\",\r\n      });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { topRated, popular, airingToday, loading, error } = this.state;\r\n    console.log(this.state);\r\n    return (\r\n      <TVPresenter\r\n        topRated={topRated}\r\n        popular={popular}\r\n        airingToday={airingToday}\r\n        loading={loading}\r\n        error={error}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\nimport Section from \"Components/Section\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  margin-bottom: 50px;\r\n  width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  all: unset;\r\n  font-size: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nconst SearchPresenter = ({\r\n  movieResults,\r\n  tvResults,\r\n  loading,\r\n  error,\r\n  searchTerm,\r\n  handleSubmit,\r\n  updateTerm,\r\n}) => (\r\n  <Container>\r\n    <Helmet>\r\n      <title> Search | Nomflix</title>\r\n    </Helmet>\r\n    <Form onSubmit={handleSubmit}>\r\n      <Input\r\n        placeholder=\"Search Movies or TV Shows...\"\r\n        value={searchTerm}\r\n        onChange={updateTerm}\r\n      />\r\n    </Form>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <>\r\n        {movieResults && movieResults.length > 0 && (\r\n          <Section title=\"Movie Results\">\r\n            {movieResults.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                imageUrl={movie.poster_path}\r\n                title={movie.original_title}\r\n                rating={movie.vote_average}\r\n                isMovie={true}\r\n                year={\r\n                  movie.release_date ? movie.release_date.substring(0, 4) : \"\"\r\n                }\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n\r\n        {tvResults && tvResults.length > 0 && (\r\n          <Section title=\"TV Results\">\r\n            {tvResults.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                imageUrl={show.poster_path}\r\n                title={show.original_name}\r\n                rating={show.vote_average}\r\n                year={\r\n                  show.first_air_date ? show.first_air_date.substring(0, 4) : \"\"\r\n                }\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n        {tvResults &&\r\n          movieResults &&\r\n          tvResults.length === 0 &&\r\n          movieResults.length === 0 && (\r\n            <Message text=\"Nothing found\" color=\"#95a5a6\" />\r\n          )}\r\n      </>\r\n    )}\r\n  </Container>\r\n);\r\n\r\nSearchPresenter.propTypes = {\r\n  movieResults: PropTypes.array,\r\n  tvResults: PropTypes.array,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n  searchTerm: PropTypes.string,\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  updateTerm: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchPresenter;\r\n","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;\r\n","import React from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\nimport { moviesApi, tvApi } from \"../../API\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    movieResults: null,\r\n    tvResults: null,\r\n    searchTerm: \"\",\r\n    loading: false,\r\n    error: null,\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { searchTerm } = this.state;\r\n    if (searchTerm !== \"\") {\r\n      this.searchByTerm();\r\n    }\r\n  };\r\n\r\n  updateTerm = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n\r\n    this.setState({\r\n      searchTerm: value,\r\n    });\r\n  };\r\n\r\n  searchByTerm = async () => {\r\n    const { searchTerm } = this.state;\r\n    this.setState({ loading: true });\r\n    try {\r\n      const {\r\n        data: { results: movieResults },\r\n      } = await moviesApi.search(searchTerm);\r\n      const {\r\n        data: { results: tvResults },\r\n      } = await tvApi.search(searchTerm);\r\n\r\n      this.setState({ movieResults, tvResults });\r\n    } catch {\r\n      this.setState({ error: \"Can't find results.\" });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { movieResults, tvResults, searchTerm, loading, error } = this.state;\r\n\r\n    return (\r\n      <SearchPresenter\r\n        movieResults={movieResults}\r\n        tvResults={tvResults}\r\n        searchTerm={searchTerm}\r\n        loading={loading}\r\n        error={error}\r\n        handleSubmit={this.handleSubmit}\r\n        updateTerm={this.updateTerm}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\n\r\nconst Container = styled.div`\r\n  height: calc(100vh - 50px);\r\n  width: 100%;\r\n  position: relative;\r\n  padding: 50px;\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-image: url(${(props) => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  filter: blur(3px);\r\n  opacity: 0.5;\r\n  z-index: 0;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  position: relative;\r\n  z-index: 1;\r\n  height: 100%;\r\n`;\r\n\r\nconst Cover = styled.div`\r\n  width: 30%;\r\n  background-image: url(${(props) => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  height: 100%;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst SubCover = styled.div`\r\n  width: 50px;\r\n  background-image: url(${(props) => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  height: 70px;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Data = styled.div`\r\n  width: 70%;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  font-size: 32px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst ItemContainer = styled.div`\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst Item = styled.span``;\r\n\r\nconst Divider = styled.span`\r\n  margin: 0 10px;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n  font-size: 12px;\r\n  opacity: 0.7;\r\n  line-height: 1.5;\r\n  width: 50%;\r\n`;\r\n\r\nconst Site = styled.a`\r\n  width: 15px;\r\n  height: 15px;\r\n  background-color: yellow;\r\n  color: black;\r\n  padding: 1px;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst SeriesLink = styled.a``;\r\n\r\nconst Url = styled.li`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  width: auto;\r\n  height: auto;\r\n  max-width: 80px;\r\n  max-height: 80px;\r\n  margin-right: 10px;\r\n  margin-bottom: 10px;\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst CollectImg = styled.img`\r\n  position: absolute;\r\n  top: 32px;\r\n  left: 0px;\r\n  width: auto;\r\n  height: auto;\r\n  max-width: 150px;\r\n  max-height: 150px;\r\n  z-index: -1;\r\n`;\r\n\r\nconst Company = styled.div`\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst GridWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-auto-rows: 1fr;\r\n`;\r\n\r\nconst SubGridWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  grid-auto-rows: 100px;\r\n`;\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n`;\r\nconst Production = styled.span``;\r\nconst SubTitle = styled.h4`\r\n  font-size: 18px;\r\n  padding: 10px 0px;\r\n  color: #e74c3c;\r\n  font-weight: 500;\r\n`;\r\nconst DetailPresenter = ({ result, loading, error, isMovie }) =>\r\n  loading ? (\r\n    <>\r\n      <Helmet>\r\n        <title>Loading | Nomflix</title>\r\n      </Helmet>\r\n      <Loader />\r\n    </>\r\n  ) : error ? (\r\n    <Message color=\"#e74c3c\" text={error} />\r\n  ) : (\r\n    <Container>\r\n      <Helmet>\r\n        <title>\r\n          {result.original_title ? result.original_title : result.original_name}{\" \"}\r\n          | Nomflix\r\n        </title>\r\n      </Helmet>\r\n      <Backdrop\r\n        bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`}\r\n      />\r\n      <Content>\r\n        <Cover\r\n          bgImage={\r\n            result.poster_path\r\n              ? `https://image.tmdb.org/t/p/original${result.poster_path}`\r\n              : require(\"../../assets/noPosterSmall.png\")\r\n          }\r\n        />\r\n        <Data>\r\n          <Title>\r\n            {result.original_title\r\n              ? result.original_title\r\n              : result.original_name}\r\n          </Title>\r\n          <ItemContainer>\r\n            <Item>\r\n              {result.release_date\r\n                ? result.release_date.substring(0, 4)\r\n                : result.first_air_date\r\n                ? result.first_air_date.substring(0, 4)\r\n                : \"???\"}\r\n            </Item>\r\n            <Divider>•</Divider>\r\n            <Item>\r\n              {result.runtime\r\n                ? result.runtime\r\n                : result.episode_run_time\r\n                ? result.episode_run_time[0]\r\n                : \"???\"}{\" \"}\r\n              min\r\n            </Item>\r\n            <Divider>•</Divider>\r\n            <Item>\r\n              {result.genres &&\r\n                result.genres.map((genre, index) =>\r\n                  index === result.genres.length - 1\r\n                    ? genre.name\r\n                    : `${genre.name} /`\r\n                )}\r\n            </Item>\r\n            {result.imdb_id ? (\r\n              <>\r\n                <Divider>•</Divider>\r\n                <Item>\r\n                  <Site href={\"https://www.imdb.com/title/\" + result.imdb_id}>\r\n                    Imdb\r\n                  </Site>\r\n                </Item>\r\n              </>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </ItemContainer>\r\n          <Overview>{result.overview}</Overview>\r\n          <GridWrapper>\r\n            <Wrapper>\r\n              <SubTitle>Production companies</SubTitle>\r\n              <Production>\r\n                {result.production_companies.length !== 0\r\n                  ? result.production_companies.map((company, index) =>\r\n                      company.logo_path ? (\r\n                        <Img\r\n                          src={\r\n                            \"https://image.tmdb.org/t/p/w300\" +\r\n                            company.logo_path\r\n                          }\r\n                        />\r\n                      ) : (\r\n                        <Company>{company.name}</Company>\r\n                      )\r\n                    )\r\n                  : \"No information\"}\r\n              </Production>\r\n            </Wrapper>\r\n            <Wrapper>\r\n              <SubTitle>Production Countries</SubTitle>\r\n              <Production>\r\n                {result.production_countries\r\n                  ? result.production_countries.map((country, index) =>\r\n                      index === result.production_countries.length - 1\r\n                        ? country.name\r\n                        : `${country.name} / `\r\n                    )\r\n                  : \"No information\"}\r\n              </Production>\r\n            </Wrapper>\r\n            <Wrapper>\r\n              <SubTitle>Videos</SubTitle>\r\n              <ul>\r\n                {result.videos.results.length !== 0\r\n                  ? result.videos.results.map((result) => (\r\n                      <Url>\r\n                        <Site\r\n                          href={\"https://www.youtube.com/watch?v=\" + result.key}\r\n                        >\r\n                          {\"https://www.youtube.com/watch?v=\" + result.key}\r\n                        </Site>\r\n                      </Url>\r\n                    ))\r\n                  : \"No information\"}\r\n              </ul>\r\n            </Wrapper>\r\n            {isMovie ? (\r\n              <Wrapper>\r\n                <SubTitle>Collections</SubTitle>\r\n                {result.belongs_to_collection ? (\r\n                  <>\r\n                    <Site\r\n                      href={\"/#/collections/\" + result.belongs_to_collection.id}\r\n                    >\r\n                      {\" \"}\r\n                      Collection link\r\n                    </Site>\r\n                    <CollectImg\r\n                      src={\r\n                        \"https://image.tmdb.org/t/p/w300\" +\r\n                        result.belongs_to_collection.poster_path\r\n                      }\r\n                    />\r\n                  </>\r\n                ) : (\r\n                  \"No information\"\r\n                )}\r\n              </Wrapper>\r\n            ) : (\r\n              <Wrapper>\r\n                <SubTitle>Series</SubTitle>\r\n                <SubGridWrapper>\r\n                  {result.seasons\r\n                    ? result.seasons.map((season, index) => (\r\n                        <SeriesLink\r\n                          href={\r\n                            \"/#/series/\" +\r\n                            result.id +\r\n                            \"/season/\" +\r\n                            season.season_number\r\n                          }\r\n                        >\r\n                          <SubCover\r\n                            bgImage={\r\n                              season.poster_path\r\n                                ? `https://image.tmdb.org/t/p/original${season.poster_path}`\r\n                                : require(\"../../assets/noPosterSmall.png\")\r\n                            }\r\n                          >\r\n                            {\" \"}\r\n                          </SubCover>\r\n                          Series{index + 1}\r\n                        </SeriesLink>\r\n                      ))\r\n                    : \"No information\"}\r\n                </SubGridWrapper>\r\n              </Wrapper>\r\n            )}\r\n          </GridWrapper>\r\n        </Data>\r\n      </Content>\r\n    </Container>\r\n  );\r\n\r\nDetailPresenter.propTypes = {\r\n  result: PropTypes.object,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n};\r\n\r\nexport default DetailPresenter;\r\n","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;\r\n","import React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\nimport { moviesApi, tvApi } from \"../../API\";\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const {\r\n      location: { pathname },\r\n    } = props;\r\n    this.state = {\r\n      result: null,\r\n      error: null,\r\n      loading: true,\r\n      isMovie: pathname.includes(\"/movie/\"),\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const {\r\n      match: {\r\n        params: { id },\r\n      },\r\n      history: { push },\r\n    } = this.props;\r\n    const { isMovie } = this.state;\r\n    const parsedId = parseInt(id);\r\n    if (isNaN(parsedId)) {\r\n      return push(\"/\");\r\n    }\r\n    let result = null;\r\n    try {\r\n      if (isMovie) {\r\n        ({ data: result } = await moviesApi.movieDetail(parsedId));\r\n      } else {\r\n        ({ data: result } = await tvApi.showDetail(parsedId));\r\n      }\r\n    } catch {\r\n      this.setState({ error: \"Can't find anything.\" });\r\n    } finally {\r\n      this.setState({ loading: false, result });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { result, error, loading, isMovie } = this.state;\r\n\r\n    return (\r\n      <DetailPresenter\r\n        result={result}\r\n        error={error}\r\n        loading={loading}\r\n        isMovie={isMovie}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\n\r\nconst Container = styled.div`\r\n  height: calc(100vh - 50px);\r\n  width: 100%;\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 10px;\r\n  grid-auto-rows: 300px;\r\n  padding: 50px;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 70%;\r\n`;\r\n\r\nconst Cover = styled.div`\r\n  width: 100%;\r\n  background-image: url(${(props) => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  height: 100%;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n`;\r\nconst Title = styled.span`\r\n  font-size: 15px;\r\n`;\r\nconst Site = styled.a``;\r\n\r\nconst CollectPresenter = ({ result, loading, error }) =>\r\n  loading ? (\r\n    <>\r\n      {\" \"}\r\n      <Helmet>\r\n        <title> Loading | Nomflix</title>\r\n      </Helmet>\r\n      <Loader />\r\n    </>\r\n  ) : error ? (\r\n    <Message color=\"#e74c3c\" text={error} />\r\n  ) : (\r\n    <Container>\r\n      {result.parts.map((part, index) => (\r\n        <Wrapper key={index}>\r\n          <>\r\n            <Site href={`/#/movie/${part.id}`}>\r\n              <Cover\r\n                bgImage={\r\n                  part.poster_path\r\n                    ? `https://image.tmdb.org/t/p/original${part.poster_path}`\r\n                    : require(\"../../assets/noPosterSmall.png\")\r\n                }\r\n              />\r\n              <Title>{part.title}</Title>\r\n            </Site>\r\n          </>\r\n        </Wrapper>\r\n      ))}\r\n    </Container>\r\n  );\r\n\r\nCollectPresenter.propTypes = {\r\n  result: PropTypes.object,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n};\r\nexport default CollectPresenter;\r\n","import CollectContainer from \"./CollectContainer\";\r\n\r\nexport default CollectContainer;\r\n","import React from \"react\";\r\nimport CollectPresenter from \"./CollectPresenter\";\r\nimport { moviesApi, tvApi, collectons } from \"../../API\";\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      result: null,\r\n      error: null,\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const {\r\n      match: {\r\n        params: { id },\r\n      },\r\n      history: { push },\r\n    } = this.props;\r\n    const parsedId = parseInt(id);\r\n    if (isNaN(parsedId)) {\r\n      return push(\"/\");\r\n    }\r\n    let result = null;\r\n    try {\r\n      ({ data: result } = await collectons.collectDetail(parsedId));\r\n    } catch (error) {\r\n      this.setState({ error: \"Can't find anything.\" });\r\n    } finally {\r\n      this.setState({ loading: false, result });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { result, error, loading } = this.state;\r\n    return <CollectPresenter result={result} error={error} loading={loading} />;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\n\r\nconst Container = styled.div`\r\n  height: calc(100vh - 50px);\r\n  width: 100%;\r\n  position: relative;\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 10px;\r\n  grid-auto-rows: 300px;\r\n  padding: 50px;\r\n`;\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 70%;\r\n`;\r\n\r\nconst Cover = styled.div`\r\n  width: 100%;\r\n  background-image: url(${(props) => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  height: 100%;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n`;\r\nconst Title = styled.span`\r\n  font-size: 15px;\r\n`;\r\nconst Site = styled.a``;\r\n\r\nconst SeriesPresenter = ({ result, loading, error }) =>\r\n  loading ? (\r\n    <>\r\n      <Helmet>\r\n        <title>Loading | Nomflix</title>\r\n      </Helmet>\r\n      <Loader />\r\n    </>\r\n  ) : error ? (\r\n    <Message color=\"#e74c3c\" text={error} />\r\n  ) : (\r\n    <Container>\r\n      {result.episodes.map((episode) => (\r\n        <Wrapper>\r\n          <Cover\r\n            bgImage={\r\n              episode.still_path\r\n                ? `https://image.tmdb.org/t/p/original${episode.still_path}`\r\n                : require(\"../../assets/noPosterSmall.png\")\r\n            }\r\n          />\r\n          <Title>{episode.name}</Title>\r\n        </Wrapper>\r\n      ))}\r\n    </Container>\r\n  );\r\n\r\nexport default SeriesPresenter;\r\n","import SeriesContainer from \"./SeriesContainer\";\r\n\r\nexport default SeriesContainer;\r\n","import React from \"react\";\r\nimport SeriesPresenter from \"./SeriesPresenter\";\r\nimport { series } from \"../../API\";\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      result: null,\r\n      error: null,\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const {\r\n      match: {\r\n        params: { id, sId },\r\n      },\r\n      history: { push },\r\n    } = this.props;\r\n\r\n    const parsedId = parseInt(id);\r\n    const parsedsId = parseInt(sId);\r\n    if (isNaN(parsedId)) {\r\n      return push(\"/\");\r\n    }\r\n    let result = null;\r\n    try {\r\n      ({ data: result } = await series.seriesDetail(parsedId, parsedsId));\r\n    } catch (error) {\r\n      this.setState({ error: \"Can't find anything.\" });\r\n    } finally {\r\n      this.setState({ loading: false, result });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { result, error, loading } = this.state;\r\n    return <SeriesPresenter result={result} error={error} loading={loading} />;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\n//withRouter는 다른 컴포넌트를 감싸는 컴포넌트이다.\r\n\r\nconst Header = styled.header`\r\n  color: white;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0%;\r\n  width: 100%;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0px 10px;\r\n  background-color: rgba(20, 20, 20, 0.7);\r\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n`;\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n`;\r\n\r\nconst Item = styled.li`\r\n  width: 50px;\r\n  height: 50px;\r\n  text-align: center;\r\n  border-bottom: 3px solid\r\n    ${(props) => (props.current ? \"#3498db\" : \"transparent\")};\r\n  transition: border-bottom 0.3s ease-in-out;\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`; // 리엑트에선 a 대신 Link를 쓴다. Link에 스타일을 주고 싶으면 옆에처럼 한다.ㅏ\r\n\r\nexport default withRouter(({ location: { pathname } }) => (\r\n  <Header>\r\n    <List>\r\n      <Item current={pathname === \"/\"}>\r\n        <SLink to=\"/\">Movies</SLink>\r\n      </Item>\r\n      <Item current={pathname === \"/tv\"}>\r\n        <SLink to=\"/tv\">TVs</SLink>\r\n      </Item>\r\n      <Item current={pathname === \"/search\"}>\r\n        <SLink to=\"/search\">Search</SLink>\r\n      </Item>\r\n    </List>\r\n  </Header>\r\n));\r\n","import React from \"react\";\r\nimport {\r\n  HashRouter as Router,\r\n  Route,\r\n  Redirect,\r\n  Switch,\r\n} from \"react-router-dom\";\r\nimport Home from \"Routes/Home\";\r\nimport TV from \"Routes/TV\";\r\nimport Search from \"Routes/Search\";\r\nimport Detail from \"Routes/Detail\";\r\nimport Collections from \"Routes/Collections\";\r\nimport Series from \"Routes/Series\";\r\nimport Header from \"Components/Header\";\r\nexport default () => {\r\n  return (\r\n    <Router>\r\n      <>\r\n        <Header />\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/tv\" component={TV} />\r\n          <Route path=\"/search\" component={Search} />\r\n          <Route path=\"/movie/:id\" component={Detail} />\r\n          <Route path=\"/show/:id\" component={Detail} />\r\n          <Route path=\"/collections/:id\" component={Collections} />\r\n          <Route path=\"/series/:id/season/:sId\" component={Series} />\r\n          <Redirect from=\"*\" to=\"/\" />\r\n        </Switch>\r\n      </>\r\n    </Router>\r\n  );\r\n};\r\n// composition은 두개 이상의 라우터를 렌더링하는 방식\r\n// <Route path=\"/tv\" component={TV}></Route>\r\n// <Route path=\"/tv/popular\" render={()=><h1>Popular</h1>} />\r\n// Redirect란  일치하는 Route가 하나도 없다면\r\n// 어느 페이지든 받아서  / 으로 보내주라\r\n// <Redirect from=\"*\" to=\"/\"/>\r\n// Switch는 한번에 오직 하나의 Route 만 Render하게 해준다.\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        text-decoration:none;\r\n        color:inherit;\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        font-family:--apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        font-size:12px;\r\n        background-color:rgba(20,20,20,1);\r\n        color:white;\r\n        padding-top:50px;\r\n    }\r\n\r\n`;\r\n\r\nexport default GlobalStyles;\r\n","import React from \"react\";\nimport Router from \"Components/Router\";\nimport GlobalStyles from \"Components/GlobalStyles\";\n\n//Components/Header 파일에  index.js를 찾는다.\n\nfunction App() {\n  return (\n    // Fragments는 네가 원하는 만큼 컴포넌트를 리턴할 수 있게 해준다.\n    <>\n      <Router />\n      <GlobalStyles />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"Components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}